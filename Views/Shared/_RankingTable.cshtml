@model RankingTableModel

<div class="card">
    <div class="card-header bg-transparent border-0">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">
                <i class="@Model.Icon me-2"></i>@Model.Title
            </h5>
            <div class="btn-group">
                @foreach (var period in Model.TimePeriods)
                {
                    <button type="button" class="btn btn-sm @(period == Model.SelectedPeriod ? "btn-primary" : "btn-outline-primary")"
                            onclick="changeRankingPeriod('@Model.Id', '@period')">
                        @period
                    </button>
                }
            </div>
        </div>
    </div>
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-hover mb-0">
                <thead class="table-light">
                    <tr>
                        <th class="text-center" style="width: 60px">#</th>
                        @foreach (var column in Model.Columns)
                        {
                            <th>@column.Title</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Items)
                    {
                        <tr>
                            <td class="text-center">
                                @if (item.Rank <= 3)
                                {
                                    <i class="bi bi-trophy-fill text-warning"></i>
                                }
                                @item.Rank
                            </td>
                            @foreach (var column in Model.Columns)
                            {
                                <td>
                                    @if (column.Type == "image")
                                    {
                                        <img src="@item.GetValue(column.Key)" alt="@item.GetValue(column.Key)" class="rounded" style="width: 32px; height: 32px; object-fit: cover;">
                                    }
                                    else if (column.Type == "badge")
                                    {
                                        <span class="badge bg-@item.GetValue(column.Key)">@item.GetValue(column.Key)</span>
                                    }
                                    else
                                    {
                                        @item.GetValue(column.Key)
                                    }
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    @if (Model.ShowPagination)
    {
        <div class="card-footer bg-transparent border-0">
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center mb-0">
                    <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="#" onclick="changeRankingPage('@Model.Id', @(Model.CurrentPage - 1))">Trước</a>
                    </li>
                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" href="#" onclick="changeRankingPage('@Model.Id', @i)">@i</a>
                        </li>
                    }
                    <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                        <a class="page-link" href="#" onclick="changeRankingPage('@Model.Id', @(Model.CurrentPage + 1))">Sau</a>
                    </li>
                </ul>
            </nav>
        </div>
    }
</div>

<script>
function changeRankingPeriod(id, period) {
    // Gọi API để lấy dữ liệu mới
    fetch(`/api/ranking/${id}?period=${period}`)
        .then(response => response.json())
        .then(data => {
            // Cập nhật UI với dữ liệu mới
            updateRankingTable(id, data);
        });
}

function changeRankingPage(id, page) {
    // Gọi API để lấy dữ liệu mới
    fetch(`/api/ranking/${id}?page=${page}`)
        .then(response => response.json())
        .then(data => {
            // Cập nhật UI với dữ liệu mới
            updateRankingTable(id, data);
        });
}

function updateRankingTable(id, data) {
    // Cập nhật nội dung bảng với dữ liệu mới
    const table = document.querySelector(`#${id} tbody`);
    table.innerHTML = data.items.map(item => `
        <tr>
            <td class="text-center">
                ${item.rank <= 3 ? '<i class="bi bi-trophy-fill text-warning"></i>' : ''}
                ${item.rank}
            </td>
            ${data.columns.map(column => `
                <td>
                    ${column.type === 'image' 
                        ? `<img src="${item[column.key]}" alt="${item[column.key]}" class="rounded" style="width: 32px; height: 32px; object-fit: cover;">`
                        : column.type === 'badge'
                            ? `<span class="badge bg-${item[column.key]}">${item[column.key]}</span>`
                            : item[column.key]
                    }
                </td>
            `).join('')}
        </tr>
    `).join('');
}
</script> 